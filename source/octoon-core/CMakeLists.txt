SET(LIB_NAME octoon-core)

# runtime libraries
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/math/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/runtime/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/image/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/mesh/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/material/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/camera/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/light/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/geometry/CMakeLists.txt)
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/lightmap/CMakeLists.txt)

IF(OCTOON_FEATURE_IO_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/io/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_INPUT_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/input/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_MODEL_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/model/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_HAL_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/hal/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_VIDEO_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/video/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_UI_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/ui/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_AUDIO_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/audio/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_PHYSICS_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/physics/CMakeLists.txt)
ENDIF()

IF(OCTOON_FEATURE_ANIMATION_ENABLE)
	INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/animation/CMakeLists.txt)
ENDIF()

IF(OCTOON_BUILD_SHARED_DLL)
	ADD_LIBRARY(${LIB_NAME} SHARED
		${RUNTIME_LIST}
		${MATH_LIST}
		${IO_LIST}
		${IMAGE_LIST}
		${INPUT_LIST}
		${ANIMATION_LIST}
		${MODEL_LIST}
		${MESH_LIST}
		${LIGHTMAP_LIST}
		${CAMERA_LIST}
		${MATERIAL_LIST}
		${AUDIO_LIST}
		${PHYSICS_LIST}
		${RENDERER_LIST}
		${UI_LIST}
		${LIGHT_LIST}
		${GEOMETRY_LIST}
		${VIDEO_LIST}
	)
ELSE()
	ADD_LIBRARY(${LIB_NAME}
		${RUNTIME_LIST}
		${MATH_LIST}
		${IO_LIST}
		${IMAGE_LIST}
		${INPUT_LIST}
		${ANIMATION_LIST}
		${MODEL_LIST}
		${MESH_LIST}
		${LIGHTMAP_LIST}
		${CAMERA_LIST}
		${MATERIAL_LIST}
		${AUDIO_LIST}
		${PHYSICS_LIST}
		${RENDERER_LIST}
		${UI_LIST}
		${LIGHT_LIST}
		${GEOMETRY_LIST}
		${VIDEO_LIST}
	)
ENDIF()

TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE CL_TARGET_OPENCL_VERSION=220)
IF(OCTOON_BUILD_SHARED_DLL)
	TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE OCTOON_BUILD_DLL_EXPORT)
ELSE()
	TARGET_COMPILE_DEFINITIONS(${LIB_NAME} PRIVATE OCTOON_STATIC)
ENDIF()

FIND_PACKAGE(libjpeg-turbo REQUIRED)
FIND_PACKAGE(PNG REQUIRED)
FIND_PACKAGE(Vorbis REQUIRED)

FIND_PACKAGE(CURL REQUIRED)
FIND_PACKAGE(Freetype REQUIRED)

TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE zipper)
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE png)
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE CURL::libcurl)
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE Freetype::Freetype)
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${libjpeg-turbo_LIBRARIES})
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE RadeonRays)
TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE Vorbis::vorbis Vorbis::vorbisenc Vorbis::vorbisfile)

IF(OCTOON_BUILD_PLATFORM_ANDROID)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE m)
ENDIF()

IF(OCTOON_BUILD_PLATFORM_APPLE)
    FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${OPENGL_FRAMEWORK})
ELSEIF(OCTOON_BUILD_PLATFORM_WINDOWS)
    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glu32)
ELSEIF(OCTOON_BUILD_PLATFORM_LINUX)
	FIND_PACKAGE(OpenGL REQUIRED)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${OPENGL_LIBRARIES})
ELSEIF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE iGLU)
ENDIF()

IF(OCTOON_FEATURE_INPUT_API_GLFW)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE glfw)
ELSEIF(OCTOON_FEATURE_INPUT_API_WINDOWS)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE winmm)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE imm32)
ENDIF()

TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_INCLUDE})
TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/curl-7.41.0/include)
TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/freetype-2.9/devel)
TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/freetype-2.9/include)
TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/minimp3)
TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${libjpeg-turbo_INCLUDE_DIRS})

IF(OCTOON_FEATURE_UI_ENABLE)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE imgui)
ENDIF()

IF(OCTOON_FEATURE_AUDIO_ENABLE)
	FIND_PACKAGE(OpenAL REQUIRED)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE OpenAL::OpenAL)
ENDIF()

IF(OCTOON_FEATURE_PHYSICS_ENABLE)
	FIND_PACKAGE(Bullet REQUIRED)
	FIND_PACKAGE(PhysX REQUIRED)
	FIND_PACKAGE(nvcloth REQUIRED)

	INCLUDE_DIRECTORIES(${PhysX_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${Bullet_INCLUDE_DIRS})
	INCLUDE_DIRECTORIES(${nvcloth_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysX)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXCommon)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXCooking)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXExtensions)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXCharacterKinematic)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXPvdSDK)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXTask)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE PhysXVehicle)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${nvcloth_LIBRARIES})
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE LinearMath Bullet3Common BulletDynamics BulletSoftBody)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE debug ${_VCPKG_INSTALLED_DIR}/x64-windows/debug/lib/Bullet3Common_Debug.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE debug ${_VCPKG_INSTALLED_DIR}/x64-windows/debug/lib/BulletCollision_Debug.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE debug ${_VCPKG_INSTALLED_DIR}/x64-windows/debug/lib/BulletDynamics_Debug.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE debug ${_VCPKG_INSTALLED_DIR}/x64-windows/debug/lib/BulletInverseDynamics_Debug.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE debug ${_VCPKG_INSTALLED_DIR}/x64-windows/debug/lib/BulletSoftBody_Debug.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE optimized ${_VCPKG_INSTALLED_DIR}/x64-windows/lib/Bullet3Common.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE optimized ${_VCPKG_INSTALLED_DIR}/x64-windows/lib/BulletCollision.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE optimized ${_VCPKG_INSTALLED_DIR}/x64-windows/lib/BulletDynamics.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE optimized ${_VCPKG_INSTALLED_DIR}/x64-windows/lib/BulletInverseDynamics.lib)
	TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE optimized ${_VCPKG_INSTALLED_DIR}/x64-windows/lib/BulletSoftBody.lib)
ENDIF()

IF(OCTOON_FEATURE_HAL_ENABLE)
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 20")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 30")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 32")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 33")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL 45")
	TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/hal/OpenGL Common")

	IF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN AND NOT OCTOON_BUILD_PLATFORM_ANDROID)
		TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/gles/include)
		TARGET_LINK_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64)
		TARGET_COPY_TO_OUTPUT_DIR(TARGET ${LIB_NAME} FILES
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/libEGL.dll
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/libGLESv2.dll
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/libMaliEmulator.dll
				${OCTOON_PATH_DEPENDENCIES}/gles/lib/Mali/x64/log4cplus.dll
			)
	ENDIF()

	IF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN)
		TARGET_INCLUDE_DIRECTORIES(${LIB_NAME} PRIVATE ${OCTOON_PATH_DEPENDENCIES}/X11)
	ENDIF()

	IF(OCTOON_BUILD_PLATFORM_APPLE)
		FIND_LIBRARY(COCOA_FRAMEWORK Cocoa)
		FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${COCOA_FRAMEWORK})
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${OPENGL_FRAMEWORK})
	ELSEIF(OCTOON_BUILD_PLATFORM_LINUX)
		FIND_PACKAGE(OpenGL REQUIRED)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE X11)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE ${OPENGL_LIBRARIES})
	ELSEIF(OCTOON_BUILD_PLATFORM_ANDROID)
	    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libEGL)
	    TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libGLESv2)
	ELSEIF(OCTOON_BUILD_PLATFORM_EMSCRIPTEN)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE EGL)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE GLESv2)
	ENDIF()

	IF(NOT OCTOON_BUILD_PLATFORM_EMSCRIPTEN AND NOT OCTOON_BUILD_PLATFORM_ANDROID)
		FIND_PACKAGE(GLEW REQUIRED)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE GLEW::GLEW)
	ENDIF()

	IF(OCTOON_FEATURE_HAL_USE_HLSL)
		#TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE hlslcc)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE libHLSLcc)
		TARGET_LINK_LIBRARIES(${LIB_NAME} PRIVATE d3dcompiler)
		TARGET_COPY_TO_OUTPUT_DIR(TARGET ${LIB_NAME} FILES "${OCTOON_PATH_DEPENDENCIES}/DirectX/Dlls/D3DCompiler_47.dll")
	ENDIF()
ENDIF()

SET_TARGET_ATTRIBUTE(${LIB_NAME} "octoon")